//
//  TestInteractor.swift
//  Evalyze
//
//  Created by –≠–ª—å–≤–∏—Ä–∞ –ú–∞—Ç–≤–µ–µ–Ω–∫–æ on 25.09.2025.
//

import Foundation

final class TestInteractor: TestInteractorInputProtocol {
    weak var output: TestInteractorOutputProtocol?
    
    private let testEvaluationService: TestEvaluationServiceProtocol
    private var currentTest: Test?
    
    init(testEvaluationService: TestEvaluationServiceProtocol = TestEvaluationService(networkClient: NetworkClient())) {
        self.testEvaluationService = testEvaluationService
    }

    func fetchIntroInfo() {
        let info = "–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ iOS. –û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –£–¥–∞—á–∏!"
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
            self.output?.didLoadIntro(info)
        }
    }

    func fetchQuestions() {
        let questions = [
            Question(id: 1, title: "ARC", prompt: "–ß—Ç–æ —Ç–∞–∫–æ–µ ARC –∏ –∫–∞–∫ –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–º—è—Ç—å—é –≤ iOS?"),
            Question(id: 2, title: "Frame vs Bounds", prompt: "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É frame –∏ bounds —É UIView –∏ –∫–æ–≥–¥–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å."),
            Question(id: 3, title: "GCD", prompt: "–ß—Ç–æ —Ç–∞–∫–æ–µ Grand Central Dispatch? –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏ UI-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."),
            Question(id: 4, title: "weak vs unowned", prompt: "–ß–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è weak –∏ unowned —Å—Å—ã–ª–∫–∏ –≤ Swift? –ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã."),
            Question(id: 5, title: "App lifecycle", prompt: "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ AppDelegate/SceneDelegate –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è? –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –∏ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞."),
            Question(id: 6, title: "ARC", prompt: "–ß—Ç–æ —Ç–∞–∫–æ–µ ARC –∏ –∫–∞–∫ –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–º—è—Ç—å—é –≤ iOS?"),
            Question(id: 7, title: "Frame vs Bounds", prompt: "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É frame –∏ bounds —É UIView –∏ –∫–æ–≥–¥–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å."),
            Question(id: 8, title: "GCD", prompt: "–ß—Ç–æ —Ç–∞–∫–æ–µ Grand Central Dispatch? –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∏ UI-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."),
            Question(id: 9, title: "weak vs unowned", prompt: "–ß–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è weak –∏ unowned —Å—Å—ã–ª–∫–∏ –≤ Swift? –ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã."),
            Question(id: 10, title: "App lifecycle", prompt: "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ AppDelegate/SceneDelegate –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è? –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –∏ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞.")
        ]
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        let mockTest = Test(
            id: "mock_test_id",
            title: "iOS Development Test",
            description: "–¢–µ—Å—Ç –ø–æ –æ—Å–Ω–æ–≤–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ iOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
            questions: questions,
            duration: 3600,
            status: .upcoming,
            createdAt: Date(),
            dueDate: nil,
            completedAt: nil,
            score: nil,
            maxScore: 100
        )
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        setCurrentTest(mockTest)
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
            self.output?.didLoadQuestions(questions)
        }
    }

    func submitAnswers(_ answers: [Int : String]) {
        print("üîç Submitting answers: \(answers)")
        
        guard let test = currentTest else {
            print("‚ùå No current test found, using fallback")
            // Fallback –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ—Å—Ç–∞
            let result = TestResult(answers: answers)
            self.output?.didSubmit(result: result)
            return
        }
        
        print("‚úÖ Current test found: \(test.title)")
        
        Task {
            do {
                print("üöÄ Sending request to DeepSeek API...")
                let evaluation = try await testEvaluationService.evaluateTest(test: test, studentAnswers: answers)
                print("‚úÖ Received evaluation: \(evaluation)")
                
                // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—Ü–µ–Ω–∫–æ–π
                let result = TestResult(
                    answers: answers,
                    overallScore: evaluation.overallScore,
                    questionScores: evaluation.questionScores,
                    feedback: evaluation.feedback
                )
                
                await MainActor.run {
                    self.output?.didSubmit(result: result)
                }
            } catch {
                print("‚ùå Error evaluating test: \(error)")
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await MainActor.run {
                    let result = TestResult(answers: answers)
                    self.output?.didSubmit(result: result)
                }
            }
        }
    }
    
    func setCurrentTest(_ test: Test) {
        self.currentTest = test
    }
}
