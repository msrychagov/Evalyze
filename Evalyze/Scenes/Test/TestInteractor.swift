//
//  TestInteractor.swift
//  Evalyze
//
//  Created by –≠–ª—å–≤–∏—Ä–∞ –ú–∞—Ç–≤–µ–µ–Ω–∫–æ on 25.09.2025.
//

import Foundation

final class TestInteractor: TestInteractorInputProtocol {
    weak var output: TestInteractorOutputProtocol?
    
    private let testEvaluationService: TestEvaluationServiceProtocol
    private var currentTest: Test?
    
    init(testEvaluationService: TestEvaluationServiceProtocol = TestEvaluationService(networkClient: NetworkClient())) {
        self.testEvaluationService = testEvaluationService
    }

    func fetchIntroInfo() {
        let questionsCount = currentTest?.questions.count ?? 0
        let info = "–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ \(questionsCount) –≤–æ–ø—Ä–æ—Å–æ–≤. –û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –£–¥–∞—á–∏!"
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
            self.output?.didLoadIntro(info)
        }
    }

    func fetchQuestions() {
        if let currentTest = currentTest {
            print("üìö Loading questions from real test: \(currentTest.title)")
            let questions = currentTest.questions
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                self.output?.didLoadQuestions(questions)
            }
        } else {
            // –ï—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            print("‚ùå No current test set - cannot load questions")
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                self.output?.didLoadQuestions([])
            }
        }
    }

    func submitAnswers(_ answers: [Int : String]) {
        print("üîç Submitting answers: \(answers)")
        print("üîç Current test: \(currentTest?.title ?? "nil")")
        
        guard let test = currentTest else {
            print("‚ùå No current test found, using fallback")
            // Fallback –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ—Å—Ç–∞
            let result = TestResult(answers: answers)
            self.output?.didSubmit(result: result)
            return
        }
        
        print("‚úÖ Current test found: \(test.title)")
        
        Task {
            do {
                print("üöÄ Sending request to DeepSeek API...")
                let evaluation = try await testEvaluationService.evaluateTest(test: test, studentAnswers: answers)
                print("‚úÖ Received evaluation: \(evaluation)")
                
                // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—Ü–µ–Ω–∫–æ–π
                let result = TestResult(
                    answers: answers,
                    overallScore: evaluation.overallScore,
                    questionScores: evaluation.questionScores,
                    feedback: evaluation.feedback
                )
                
                await MainActor.run {
                    self.output?.didSubmit(result: result)
                }
            } catch {
                print("‚ùå Error evaluating test: \(error)")
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await MainActor.run {
                    let result = TestResult(answers: answers)
                    self.output?.didSubmit(result: result)
                }
            }
        }
    }
    
    func setCurrentTest(_ test: Test) {
        print("üîß Setting current test: \(test.title) (ID: \(test.id))")
        self.currentTest = test
    }
}
