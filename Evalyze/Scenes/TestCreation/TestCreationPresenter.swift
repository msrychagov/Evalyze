//
//  TestCreationPresenter.swift
//  Evalyze
//
//  Created by –ú–∏—Ö–∞–∏–ª –†—ã—á–∞–≥–æ–≤ on 27.09.2025.
//

import Foundation
import UIKit

final class TestCreationPresenter: TestCreationPresenterProtocol, TestCreationInteractorOutputProtocol {
    weak var view: TestCreationViewProtocol?
    var interactor: TestCreationInteractorInputProtocol?
    var router: TestCreationRouterProtocol?
    
    private var testModel = TestCreationModel()
    private var allQuestions: [Question] = []
    
    func viewDidLoad() {
        view?.showLoading()
        interactor?.fetchGroups()
        interactor?.fetchQuestions()
    }
    
    func didSelectGroup(_ group: String) {
        testModel.selectedGroup = group
    }
    
    func didSelectQuestion(_ question: Question) {
        if !testModel.selectedQuestions.contains(where: { $0.intId == question.intId }) {
            testModel.selectedQuestions.append(question)
        }
    }
    
    func didDeselectQuestion(_ question: Question) {
        testModel.selectedQuestions.removeAll { $0.intId == question.intId }
    }
    
    func didUpdateSelectedQuestions(_ questions: [Question]) {
        testModel.selectedQuestions = questions
    }
    
    func didUpdateTitle(_ title: String) {
        testModel.title = title
    }
    
    func didUpdateDescription(_ description: String) {
        testModel.description = description
    }
    
    func didUpdateDuration(_ duration: TimeInterval) {
        testModel.duration = duration
    }
    
    func didUpdateDueDate(_ dueDate: Date?) {
        testModel.startDate = dueDate
    }
    
    func didTapCreateTest() {
        print("üîç Validating test creation:")
        print("- Title: '\(testModel.title)' (isEmpty: \(testModel.title.isEmpty))")
        print("- Description: '\(testModel.description)' (isEmpty: \(testModel.description.isEmpty))")
        print("- Selected Group: \(testModel.selectedGroup ?? "nil")")
        print("- Selected Questions: \(testModel.selectedQuestions.count) questions")
        print("- Is Valid: \(testModel.isValid)")
        
        guard testModel.isValid else {
            var missingFields: [String] = []
            if testModel.title.isEmpty { missingFields.append("–ù–∞–∑–≤–∞–Ω–∏–µ") }
            if testModel.description.isEmpty { missingFields.append("–û–ø–∏—Å–∞–Ω–∏–µ") }
            if testModel.selectedGroup == nil { missingFields.append("–ì—Ä—É–ø–ø–∞") }
            if testModel.selectedQuestions.isEmpty { missingFields.append("–í–æ–ø—Ä–æ—Å—ã") }
            
            let errorMessage = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: \(missingFields.joined(separator: ", "))"
            view?.showError(errorMessage)
            return
        }
        
        view?.showLoading()
        interactor?.createTest(testModel)
    }
    
    func didTapSelectQuestions() {
        guard let view = view as? UIViewController else { return }
        router?.presentQuestionSelection(from: view, selectedQuestions: testModel.selectedQuestions) { [weak self] selectedQuestions in
            self?.testModel.selectedQuestions = selectedQuestions
            if let testCreationVC = view as? TestCreationViewController {
                testCreationVC.updateQuestionsButton()
            }
        }
    }
    
    // MARK: - TestCreationInteractorOutputProtocol
    func didFetchGroups(_ groups: [String]) {
        print("üìã Presenter received \(groups.count) groups: \(groups)")
        view?.showGroups(groups)
    }
    
    func didFetchQuestions(_ questions: [Question]) {
        print("üìã Presenter received \(questions.count) questions")
        allQuestions = questions
        view?.showQuestions(questions)
        view?.hideLoading()
    }
    
    // MARK: - Public Methods
    func getAllQuestions() -> [Question]? {
        return allQuestions.isEmpty ? nil : allQuestions
    }
    
    func didCreateTest(_ test: Test) {
        view?.hideLoading()
        view?.showSuccess("–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
        NotificationCenter.default.post(name: NSNotification.Name("TestCreated"), object: test)
    }
    
    func didFailToCreateTest(_ error: Error) {
        view?.hideLoading()
        view?.showError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç")
    }
}
