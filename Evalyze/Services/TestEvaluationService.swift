//
//  TestEvaluationService.swift
//  Evalyze
//
//  Created by –ú–∏—Ö–∞–∏–ª –†—ã—á–∞–≥–æ–≤ on 27.09.2025.
//

import Foundation

protocol TestEvaluationServiceProtocol {
    func evaluateTest(test: Test, studentAnswers: [Int: String]) async throws -> TestEvaluationResponse
}

class TestEvaluationService: TestEvaluationServiceProtocol {
    private let networkClient: NetworkClientProtocol
    private let apiKey = "sk-46b7350b1db04591814d87702d074643"
    private let baseURL = "https://api.deepseek.com/v1/chat/completions"
    
    init(networkClient: NetworkClientProtocol) {
        self.networkClient = networkClient
    }
    
    func evaluateTest(test: Test, studentAnswers: [Int: String]) async throws -> TestEvaluationResponse {
        print("üîç Creating evaluation prompt for test: \(test.title)")
        let prompt = createTestEvaluationPrompt(test: test, studentAnswers: studentAnswers)
        print("üìù Prompt created, length: \(prompt.count) characters")
        
        let request = DeepSeekRequest(
            model: "deepseek-chat",
            messages: [
                DeepSeekMessage(role: "system", content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ. –û—Ü–µ–Ω–∏–≤–∞–π –æ—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ, –¥–∞–≤–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å."),
                DeepSeekMessage(role: "user", content: prompt)
            ],
            temperature: 0.3, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
            maxTokens: 2000
        )
        
        print("üöÄ Sending request to DeepSeek API...")
        let response: DeepSeekResponse = try await networkClient.post(
            url: baseURL,
            body: request,
            headers: createHeaders()
        )
        
        print("üì• Received response from DeepSeek")
        let content = response.choices.first?.message.content ?? ""
        print("üìÑ Response content: \(content)")
        
        return try parseTestEvaluationResponse(content)
    }
    
    private func createTestEvaluationPrompt(test: Test, studentAnswers: [Int: String]) -> String {
        var prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç –∏ –æ—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç 0 –¥–æ 10 –±–∞–ª–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –¥–∞–π –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É. –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –Ω–∏–∂–µ.

        {
            "overall_score": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10,
            "question_scores": [
                {
                    "question_id": –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞,
                    "score": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10,
                    "feedback": "–∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–≤–µ—Ç—É"
                }
            ],
            "feedback": "–æ–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞–±–æ—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞"
        }

        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ:
        –ù–∞–∑–≤–∞–Ω–∏–µ: \(test.title)
        –û–ø–∏—Å–∞–Ω–∏–µ: \(test.description)

        –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞:
        """
        
        for (index, question) in test.questions.enumerated() {
            let studentAnswer = studentAnswers[question.id] ?? "–û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
            prompt += """
            
            –í–æ–ø—Ä–æ—Å \(index + 1) (ID: \(question.id)):
            –¢–µ–º–∞: \(question.title)
            –í–æ–ø—Ä–æ—Å: \(question.prompt)
            –û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: \(studentAnswer)
            """
        }
        
        prompt += """
        
        –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:
        - 10 –±–∞–ª–ª–æ–≤: –ü–æ–ª–Ω—ã–π, —Ç–æ—á–Ω—ã–π –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç
        - 8-9 –±–∞–ª–ª–æ–≤: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—è–º–∏
        - 6-7 –±–∞–ª–ª–æ–≤: –ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        - 4-5 –±–∞–ª–ª–æ–≤: –û—Ç–≤–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏, –Ω–æ –µ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã
        - 2-3 –±–∞–ª–ª–∞: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã
        - 0-1 –±–∞–ª–ª: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç–∞

        –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:
        - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π
        - –£–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        - –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        - –ë—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω–æ–π (–Ω–µ –±–æ–ª–µ–µ 30 —Å–ª–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å)

        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        """
        
        return prompt
    }
    
    private func createHeaders() -> [String: String] {
        return [
            "Authorization": "Bearer \(apiKey)",
            "Content-Type": "application/json"
        ]
    }
    
    private func parseTestEvaluationResponse(_ responseText: String) throws -> TestEvaluationResponse {
        // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        let cleanedText = responseText.trimmingCharacters(in: .whitespacesAndNewlines)
        
        // –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
        guard let jsonStart = cleanedText.firstIndex(of: "{"),
              let jsonEnd = cleanedText.lastIndex(of: "}") else {
            throw NetworkError.invalidResponse
        }
        
        let jsonString = String(cleanedText[jsonStart...jsonEnd])
        
        do {
            let data = jsonString.data(using: .utf8) ?? Data()
            let response = try JSONDecoder().decode(TestEvaluationResponse.self, from: data)
            return response
        } catch {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º fallback –æ—Ç–≤–µ—Ç
            return createFallbackResponse()
        }
    }
    
    private func createFallbackResponse() -> TestEvaluationResponse {
        return TestEvaluationResponse(
            overallScore: 0.0,
            questionScores: [],
            feedback: "–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    }
}
